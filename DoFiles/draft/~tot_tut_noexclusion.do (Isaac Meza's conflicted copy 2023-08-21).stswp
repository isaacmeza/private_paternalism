*! version 1.0.0  21aug2023
cap program drop tot_tut_noexclusion
program tot_tut_noexclusion, rclass
	version 17.0
	
	syntax varlist(min=2 max=2) [if] [in] [, quantile(real 0.10) tot(real 0) tut(real 0)] 
	
	
	gettoken var Z : varlist
	tempvar _cum _closest 
	marksample touse
	
	
	******************************* ESTIMATION OF BOUNDS ***********************
	
	* Cut the top and bottom quantile% to obtain an upper a lower bound for E[Y_0 | C=0]
	* Cut the top and bottom (1-quantile)% to obtain an upper a lower bound for E[Y_0 | C=1]
	noi di "hola"
	* Identify the distribution F_0 of Y_0 from the control arm.
	cap drop `_cum'
	cumul `var' if `Z'==0, gen(`_cum')
	
	cap drop `_closest'
	gen `_closest' = abs(`quantile'-`_cum')
	sort `_closest'
	local bottom_0 = `var'[1]
	su `var' if `var'>`bottom_0' & `Z'==0
	local ub_0_0= `r(mean)'
	su `var' if `var'<`bottom_0' & `Z'==0
	local lb_0_1= `r(mean)'

	cap drop `_closest'
	gen `_closest' = abs(1-`quantile'-`_cum')
	sort `_closest'
	local top_0 = `var'[1]
	su `var' if `var'<`top_0'  & `Z'==0
	local lb_0_0 = `r(mean)'
	su `var' if `var'>`top_0'  & `Z'==0
	local ub_0_1 = `r(mean)'


	* Cut the top and bottom quantile% to obtain an upper a lower bound for E[Y_1 | C=0]
	* Cut the top and bottom (1-quantile)% to obtain an upper a lower bound for E[Y_1 | C=1]

	* Identify the distribution F_1 of Y_1 from the treatment arm.
	cap drop `_cum'
	cumul `var' if `Z'==1, gen(`_cum')
	
	cap drop `_closest'
	gen `_closest' = abs(`quantile'-`_cum')
	sort `_closest'
	local bottom_0 = `_cum'[1]
	su `var' if `var'>`bottom_0' & `Z'==1
	local ub_0_0= `r(mean)'
	su `var' if `var'<`bottom_0' & `Z'==1
	local lb_0_1= `r(mean)'

	cap drop `_closest'
	gen `_closest' = abs(1-`quantile'-`_cum')
	sort `_closest'
	local top_0 = `_cum'[1]
	su `var' if `var'<`top_0'  & `Z'==1
	local lb_0_0 = `r(mean)'
	su `var' if `var'>`top_0'  & `Z'==1
	local ub_0_1 = `r(mean)'


	*Bounds for the TUT
	local ub_tut = `ub_1_0'-`lb_0_0'
	local lb_tut = `lb_1_0'-`ub_0_0'

	*Bounds for the ToT
	local ub_tot = `ub_1_1'-`lb_0_1'
	local lb_tot = `lb_1_1'-`ub_0_1'

	*test inequalities
	return scalar ub_tut_validity = `tut'-`ub_tut' 
	*return scalar lb_tut_validity = `lb_tut'-`tut' 
	*return scalar ub_tot_validity = `tot'-`ub_tot' 
	*return scalar lb_tot_validity = `lb_tot'-`tot' 
end



 

